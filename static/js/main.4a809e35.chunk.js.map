{"version":3,"sources":["resultList.jsx","serviceWorker.js","index.js","App.js"],"names":["ResultList","props","className","myData","map","v","src","picture","large","alt","name","title","first","last","location","city","country","cell","email","dob","age","gender","Boolean","window","hostname","match","ReactDOM","render","useState","count","setCount","results","setResults","shouldRender","setshouldRender","setGender","national","setNational","useEffect","fetch","then","res","json","jsonData","console","log","onChange","e","target","value","action","type","onClick","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAEe,SAASA,EAAWC,GACjC,OACE,yBAAKC,UAAU,oBACZD,EAAME,OAAOC,KAAI,SAAAC,GAAC,OACjB,yBAAKH,UAAU,QACb,yBAAKI,IAAKD,EAAEE,QAAQC,MAAON,UAAU,mBAAmBO,IAAI,QAC5D,yBAAKP,UAAU,iBACb,wBAAIA,UAAU,0BACXG,EAAEK,KAAKC,MAAQ,IACfN,EAAEK,KAAKE,MAAQ,IACfP,EAAEK,KAAKG,MAEV,uBAAGX,UAAU,cACVG,EAAES,SAASC,KAAO,KADrB,IAC4BV,EAAES,SAASE,QAAU,MAGnD,wBAAId,UAAU,mCACZ,wBAAIA,UAAU,mBACXG,EAAEY,KADL,IACW,6BACRZ,EAAEa,OAEL,wBAAIhB,UAAU,mBAAmBG,EAAEc,IAAIC,IAAvC,cACA,wBAAIlB,UAAU,mBAAmBG,EAAEgB,c,MCZ3BC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCHD,WAAoB,IAAD,EACNC,mBAAS,GADH,mBACzBC,EADyB,KAClBC,EADkB,OAEFF,mBAAS,IAFP,mBAEzBG,EAFyB,KAEhBC,EAFgB,OAGQJ,oBAAS,GAHjB,mBAGzBK,EAHyB,KAGXC,EAHW,OAIJN,mBAAS,UAJL,mBAIzBP,EAJyB,KAIjBc,EAJiB,OAKAP,mBAAS,MALT,mBAKzBQ,EALyB,KAKfC,EALe,KAqBhC,OAdAC,qBAAU,WAGJL,IACFM,MAAM,sCAAD,OACmCV,EADnC,gBACgDO,EADhD,mBACmEf,IAErEmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAQ,OAAIX,EAAW,YAAIW,EAASZ,aAE5CG,GAAgB,IAElBU,QAAQC,IAAId,MAGZ,yBAAK7B,UAAU,sBACb,yBAAKA,UAAU,6BACb,sDACA,4BACE4C,SAAU,SAAAC,GACRV,EAAYU,EAAEC,OAAOC,SAGvB,4BAAQA,MAAM,IAAd,UACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,iBACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,WAEF,4BACA,0BAAMC,OAAO,IACX,iDACA,2BACEC,KAAK,QACLC,QAAS,kBAAMjB,EAAU,SACzBzB,KAAK,SACLuC,MAAM,SACL,IAPL,OASE,2BACEE,KAAK,QACLC,QAAS,kBAAMjB,EAAU,WACzBzB,KAAK,SACLuC,MAAM,WACL,IAdL,UAiBA,4BACA,0CAAgBpB,EAAhB,UACA,4BACGE,EAAQ3B,KAAI,SAAAqC,GAAG,OACd,wBAAIY,IAAKZ,EAAIxB,MAAOwB,EAAI/B,KAAKE,WAGjC,4BACEV,UAAU,eACVkD,QAAS,WACPtB,EAASD,EAAQ,GACjBK,GAAgB,KAJpB,aAUF,kBAAClC,EAAD,CAAYG,OAAQ4B,ODpEV,MAASuB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.4a809e35.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ResultList(props) {\n  return (\n    <div className=\"d-flex flex-wrap\">\n      {props.myData.map(v => (\n        <div className=\"card\">\n          <img src={v.picture.large} className=\"card-img-top p-2\" alt=\"...\" />\n          <div className=\"card-body p-2\">\n            <h5 className=\"card-title text-center\">\n              {v.name.title + \" \"}\n              {v.name.first + \" \"}\n              {v.name.last}\n            </h5>\n            <p className=\"card-text \">\n              {v.location.city + \", \"} {v.location.country + \" \"}\n            </p>\n          </div>\n          <ul className=\"list-group list-group-flush p-0\">\n            <li className=\"list-group-item\">\n              {v.cell} <br />\n              {v.email}\n            </li>\n            <li className=\"list-group-item\">{v.dob.age} years old</li>\n            <li className=\"list-group-item\">{v.gender}</li>\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport ResultList from \"./resultList\";\nimport \"./App.css\";\nexport default function Example() {\n  const [count, setCount] = useState(0);\n  const [results, setResults] = useState([]);\n  const [shouldRender, setshouldRender] = useState(false);\n  const [gender, setGender] = useState(\"female\");\n  const [national, setNational] = useState(\"gb\");\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    //document.title = `You clicked ${count} times`;\n    if (shouldRender) {\n      fetch(\n        `https://randomuser.me/api/?results=${count}&nat=${national}&gender=${gender}`\n      )\n        .then(res => res.json())\n        .then(jsonData => setResults([...jsonData.results]));\n\n      setshouldRender(false);\n    }\n    console.log(results);\n  });\n  return (\n    <div className=\"d-flex flex-nowrap\">\n      <div className=\"bg-danger p-3 text-center\">\n        <p>Select the nationality:</p>\n        <select\n          onChange={e => {\n            setNational(e.target.value);\n          }}\n        >\n          <option value=\"\">Select</option>\n          <option value=\"us\">American</option>\n          <option value=\"gb\">Great Britain</option>\n          <option value=\"nz\">New Zealand</option>\n          <option value=\"de\">German</option>\n        </select>\n        <p></p>\n        <form action=\"\">\n          <p>Select the gender:</p>\n          <input\n            type=\"radio\"\n            onClick={() => setGender(\"male\")}\n            name=\"gender\"\n            value=\"male\"\n          />{\" \"}\n          Male\n          <input\n            type=\"radio\"\n            onClick={() => setGender(\"female\")}\n            name=\"gender\"\n            value=\"female\"\n          />{\" \"}\n          Female\n        </form>\n        <p></p>\n        <p>Now showing {count} users</p>\n        <ul>\n          {results.map(res => (\n            <li key={res.cell}>{res.name.first}</li>\n          ))}\n        </ul>\n        <button\n          className=\"btn btn-info\"\n          onClick={() => {\n            setCount(count + 1);\n            setshouldRender(true);\n          }}\n        >\n          Add User\n        </button>\n      </div>\n      <ResultList myData={results} />\n    </div>\n  );\n}\n"],"sourceRoot":""}